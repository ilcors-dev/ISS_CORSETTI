/* Generated by AN DISI Unibo */ 
package it.unibo.boundary

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Boundary ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				val OWNER = "$name";
				var STEPSDONE = 0;
				var SIDE = 0;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name starts")
						request("engage", "engage($OWNER,350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleEngageDone",cond=whenReply("engagedone"))
					transition(edgeName="t01",targetState="handleEngageRefused",cond=whenReply("engagerefused"))
				}	 
				state("handleEngageRefused") { //this:State
					action { //it:State
						CommUtils.outred("$name engage refused")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleEngageDone") { //this:State
					action { //it:State
						CommUtils.outgreen("$name engage accepted")
						delay(100) 
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t03",targetState="handleSonar",cond=whenEvent("sonardata"))
				}	 
				state("handleStepDone") { //this:State
					action { //it:State
						CommUtils.outgreen("step ok")
						 STEPSDONE += 1;  
						delay(100) 
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t05",targetState="handleObstacle",cond=whenReply("stepfailed"))
					transition(edgeName="t06",targetState="handleSonar",cond=whenEvent("sonardata"))
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						CommUtils.outmagenta("obstacle!")
						if(  SIDE == 3  
						 ){CommUtils.outblack("PERIMETRO: $STEPSDONE passi")
						forward("setdirection", "dir(down)" ,"basicrobot" ) 
						 System.exit(0)  
						}
						else
						 { SIDE += 1  
						 }
						delay(100) 
						if(  SIDE == 0  
						 ){forward("setdirection", "dir(down)" ,"basicrobot" ) 
						}
						if(  SIDE == 1  
						 ){forward("setdirection", "dir(right)" ,"basicrobot" ) 
						}
						if(  SIDE == 2  
						 ){forward("setdirection", "dir(up)" ,"basicrobot" ) 
						}
						if(  SIDE == 3  
						 ){forward("setdirection", "dir(left)" ,"basicrobot" ) 
						}
						delay(500) 
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="handleStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t08",targetState="handleObstacle",cond=whenReply("stepfailed"))
				}	 
				state("handleSonar") { //this:State
					action { //it:State
						CommUtils.outred("SONARRRR")
						delay(50) 
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						delay(500) 
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="handleStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t010",targetState="handleObstacle",cond=whenReply("stepfailed"))
				}	 
			}
		}
} 
