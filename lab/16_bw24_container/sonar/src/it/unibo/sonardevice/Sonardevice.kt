/* Generated by AN DISI Unibo */ 
package it.unibo.sonardevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Sonardevice ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
			  lateinit var process: Process;
			  lateinit var reader: java.io.BufferedReader;
			  var working = false;
			  var Distance = 0;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="start",cond=whenDispatch("sonarstart"))
					transition(edgeName="t03",targetState="stop",cond=whenDispatch("sonarstop"))
				}	 
				state("stop") { //this:State
					action { //it:State
						
									process.destroy();
						CommUtils.outcyan("SONAR STOPPED")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="stop",cond=whenDispatch("sonarstop"))
				}	 
				state("start") { //this:State
					action { //it:State
						
									working = true
									process = Runtime.getRuntime().exec("python3 sonar.py");
								    reader = java.io.BufferedReader(java.io.InputStreamReader(process.inputStream))
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="readSonarData", cond=doswitch() )
				}	 
				state("readSonarData") { //this:State
					action { //it:State
						
									var data = reader.readLine()
									
									//CommUtils.outyellow("$name with python: data = $data"   )
									
									if( data != null ){
									
										try{
										
											val vd = data.toFloat()
											
											val v  = vd.toInt()
										
										if ( v <= 100 ) { //A first filter ...
										
											Distance = v
										
										} else Distance = 0
										
										} catch(e: Exception) {
										
											CommUtils.outred("$name readSonarDataERROR: $e "   )
										
										}
										
									}		
						if(  Distance > 0  
						 ){emit("sonardata", "distance($Distance)" ) 
						}
						forward("doread", "doread(1)" ,name ) 
						delay(200) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="stop",cond=whenDispatch("sonarstop"))
					transition(edgeName="t06",targetState="readSonarData",cond=whenDispatchGuarded("doread",{ working  
					}))
					transition(edgeName="t07",targetState="endOfRead",cond=whenDispatchGuarded("doread",{ !working  
					}))
				}	 
				state("endOfRead") { //this:State
					action { //it:State
						
									process.destroy()
							
								    if (process.isAlive()) {
									    process.destroyForcibly();
									}
							
									CommUtils.outred("$tt $name | endOfRead"  )	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="start",cond=whenDispatch("sonarstart"))
					transition(edgeName="t09",targetState="stop",cond=whenDispatch("sonarstop"))
				}	 
			}
		}
} 
