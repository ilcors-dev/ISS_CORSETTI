System bw24

Dispatch sonarstart : sonarstart(X)
Dispatch sonarstop  : sonarstop(X)
Event sonardata : distance(D)
Event obstacle  : obstacle(D)
Dispatch doread : doread(X)  //byNat
Event  wolf     : wolf(D)	  "simile ad obstacle, ma propagato a bw24 in rete"

Context ctxbw24 ip [host="localhost" port=8120]

QActor sonarnomqtt context ctxbw24 {
	[# var D = 0; #]
	State s0 initial {
		delay 5000
		forward sonardevice -m sonarstart : sonarstart(1)
		
		// STOP TEST
		// delay 5000		
		// println("$name SENDING STOP")
		// forward sonardevice -m sonarstop : sonarstop(0)
		
		subscribeTo distancefilter for obstacle
	}
	
	Transition t0 whenEvent obstacle -> handleObstacle
	
	State handleObstacle {
		 onMsg(obstacle : obstacle(D)) {
		 	[#  D = payloadArg(0).toInt() #]
 			println("$name OBSTACLE DETECTED ($D)") color green
 			emit  wolf : wolf($D)
 			
 			delay 200
    	}
	}
	
	Transition t0 whenEvent obstacle -> handleObstacle
}

QActor sonardevice context ctxbw24 {
	[#
	  lateinit var process: Process;
	  lateinit var reader: java.io.BufferedReader;
	  var working = false;
	  var Distance = 0;
	#]

	State s0 initial {	}

	Transition t0
		whenMsg	sonarstart -> start
		whenMsg sonarstop -> stop

	State stop {
		[#
			process.destroy();
		#]
		println("SONAR STOPPED") color cyan
	}

	Transition t0
		whenMsg sonarstop -> stop

	State start { 
		[#
			working = true
			process = Runtime.getRuntime().exec("python3 sonar.py");
		    reader = java.io.BufferedReader(java.io.InputStreamReader(process.inputStream))
		#]

		delay 500
	}

	Goto readSonarData

	State readSonarData { //By Nat
		[#
			var data = reader.readLine()
			
			//CommUtils.outyellow("$name with python: data = $data"   )
			
			if( data != null ){
			
				try{
				
					val vd = data.toFloat()
					
					val v  = vd.toInt()
				
				if ( v <= 100 ) { //A first filter ...
				
					Distance = v
				
				} else Distance = 0
				
				} catch(e: Exception) {
				
					CommUtils.outred("$name readSonarDataERROR: $e "   )
				
				}
				
			}		
		#]
	
		if [# Distance > 0 #] { 
			//emitlocalstream sonardata : distance($Distance)
			emit sonardata : distance($Distance)
		}

		// if [# Distance < 10 #] {
		
		// emit obstacle : obstacle($Distance)
		
		// }

		autodispatch doread : doread(1)

		delay 200
	}

	Transition t0
	   whenMsg sonarstop  -> stop
	   whenMsg doread and [# working #] -> readSonarData
	   whenMsg doread and [# !working #] -> endOfRead

	State endOfRead {
		[#
			process.destroy()
	
		    if (process.isAlive()) {
			    process.destroyForcibly();
			}
	
			CommUtils.outred("$tt $name | endOfRead"  )	
		#]
	}

	Transition t0 
		whenMsg sonarstart -> start 
		whenMsg sonarstop  -> stop //non dovrebbe arrivare, ma ...
}

QActor datacleaner context ctxbw24 {
	[# var D = 0; #]
	State s0 initial {
		subscribeTo sonardevice for sonardata
		
		println("$name subscribed to sonardevice") color blue
	}
	
	Transition t0 whenEvent sonardata -> filter
	
	State filter {
		onMsg(sonardata : distance(D)) {
	      	[#  D = payloadArg(0).toInt() #]
	      	
	      	// filter out random data that could be generated from the sonar and propagate the event
	      	if [# D < 300 #] {
	 			emitlocalstream  sonardata : distance($D)
	     	}
    	}
	}
	
	Transition t0 whenEvent sonardata -> filter
}


QActor distancefilter context ctxbw24 {
	[# var D = 0; #]
	State s0 initial {
		// here we should receive the data already cleaned from random sonar measurements
		subscribeTo datacleaner for sonardata
		
		println("$name subscribed to datacleaner") color yellow
	}
	
	Transition t0 whenEvent sonardata -> filter
	
	State filter {
		onMsg(sonardata : distance(D)) {
	      	[#  D = payloadArg(0).toInt() #]
	      	
	      	// filter out random data that could be generated from the sonar and propagate the event
	      	if [# D > 0 && D <= 150 #] {
	 			emitlocalstream  obstacle : obstacle($D)
	     	}
    	}
	}
	
	Transition t0 whenEvent sonardata -> filter
}
